-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module HindleyMilner.Parser.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified HindleyMilner.Parser.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: HindleyMilner.Parser.Abs.Ident -> Result
transIdent x = case x of
  HindleyMilner.Parser.Abs.Ident string -> failure x

transUVarIdent :: HindleyMilner.Parser.Abs.UVarIdent -> Result
transUVarIdent x = case x of
  HindleyMilner.Parser.Abs.UVarIdent string -> failure x

transPattern :: HindleyMilner.Parser.Abs.Pattern -> Result
transPattern x = case x of
  HindleyMilner.Parser.Abs.PatternVar ident -> failure x

transExp :: HindleyMilner.Parser.Abs.Exp -> Result
transExp x = case x of
  HindleyMilner.Parser.Abs.EVar ident -> failure x
  HindleyMilner.Parser.Abs.ETrue -> failure x
  HindleyMilner.Parser.Abs.EFalse -> failure x
  HindleyMilner.Parser.Abs.ENat integer -> failure x
  HindleyMilner.Parser.Abs.EAdd exp1 exp2 -> failure x
  HindleyMilner.Parser.Abs.ESub exp1 exp2 -> failure x
  HindleyMilner.Parser.Abs.EIf exp1 exp2 exp3 -> failure x
  HindleyMilner.Parser.Abs.EIsZero exp -> failure x
  HindleyMilner.Parser.Abs.ETyped exp type_ -> failure x
  HindleyMilner.Parser.Abs.ELet pattern_ exp scopedexp -> failure x
  HindleyMilner.Parser.Abs.EAbs pattern_ scopedexp -> failure x
  HindleyMilner.Parser.Abs.EApp exp1 exp2 -> failure x
  HindleyMilner.Parser.Abs.EFor pattern_ exp1 exp2 scopedexp -> failure x

transScopedExp :: HindleyMilner.Parser.Abs.ScopedExp -> Result
transScopedExp x = case x of
  HindleyMilner.Parser.Abs.ScopedExp exp -> failure x

transType :: HindleyMilner.Parser.Abs.Type -> Result
transType x = case x of
  HindleyMilner.Parser.Abs.TUVar uvarident -> failure x
  HindleyMilner.Parser.Abs.TNat -> failure x
  HindleyMilner.Parser.Abs.TBool -> failure x
  HindleyMilner.Parser.Abs.TArrow type_1 type_2 -> failure x
  HindleyMilner.Parser.Abs.TVar ident -> failure x
  HindleyMilner.Parser.Abs.TForAll typepattern scopedtype -> failure x

transScopedType :: HindleyMilner.Parser.Abs.ScopedType -> Result
transScopedType x = case x of
  HindleyMilner.Parser.Abs.ScopedType type_ -> failure x

transTypePattern :: HindleyMilner.Parser.Abs.TypePattern -> Result
transTypePattern x = case x of
  HindleyMilner.Parser.Abs.TPatternVar ident -> failure x
