-- Expressions grammar.

PatternVar. Pattern ::= Ident ;

EVar.    Exp3 ::= Ident ;
ETrue.   Exp3 ::= "true" ;
EFalse.  Exp3 ::= "false" ;
ENat.    Exp3 ::= Integer ;
EAdd.    Exp2 ::= Exp2 "+" Exp3 ;
ESub.    Exp2 ::= Exp2 "-" Exp3 ;
EIf.     Exp1 ::= "if" Exp1 "then" Exp1 "else" Exp1 ;
EIsZero. Exp2 ::= "iszero" "(" Exp ")" ;
ETyped.  Exp  ::= Exp1 ":" Type ;
ELet.    Exp1 ::= "let" Pattern "=" Exp1 "in" ScopedExp ;
EAbs.    Exp1 ::= "Î»" Pattern "." ScopedExp ;
EApp.    Exp1 ::= Exp1 Exp2 ;
EFor.    Exp1 ::= "for" Pattern "in" "[" Exp1 ".." Exp1 "]" "do" ScopedExp ;

coercions Exp 3 ;

ScopedExp. ScopedExp ::= Exp1 ;

-- Types grammar.

token UVarIdent ('?' letter (letter | digit | '_')*) ;
TPatternVar. TypePattern ::= Ident ;

TUVar.   Type2 ::= UVarIdent ;
TNat.    Type2 ::= "Nat" ;
TBool.   Type2 ::= "Bool" ;
TArrow.  Type1 ::= Type2 "->" Type1 ;
TVar.    Type2 ::= Ident ;
TForAll. Type ::= "forall" TypePattern "." ScopedType ;

coercions Type 2 ;

ScopedType. ScopedType ::= Type1 ;
